# 경비 코드 기능 개선 PRD

## 프로젝트 개요
경비 코드 관리 시스템의 사용성과 유연성을 향상시키기 위한 기능 개선

## 현재 상태
- 경비 코드에 한도 금액 설정 가능 (숫자 입력만 가능)
- 추가 필드 생성은 가능하나 수정 불가능
- 추가 필드 순서 고정

## 목표
1. 한도 금액에 "한도 없음" 옵션 추가
2. 추가 필드의 수정 기능 구현
3. 추가 필드 순서 변경 기능 구현
4. 전반적인 UX 개선

## 세부 요구사항

### 1. 한도 없음 옵션
- 한도 금액 입력 필드 옆에 "한도 없음" 체크박스 추가
- 체크박스 선택 시 금액 입력 필드 비활성화
- 데이터베이스에는 NULL로 저장
- 기존 데이터와의 호환성 유지
- 뷰에서 "한도 없음"으로 표시
- 일반 사용자가 경비 항목 추가할 때에는 기존 금액 입력 인터페이스에 변경 필요 없음

### 2. 추가 필드 수정 기능
- 이미 생성된 필드의 이름(라벨) 수정 가능
- 필드 타입 변경 가능 (단, 이미 데이터가 있는 경우 경고)
- 필수/선택 속성 변경 가능
- 필드 키(field_key)는 자동 생성되며 변경 불가
- 인라인 편집 UI 제공
- 일반 사용자가 경비 항목 추가할 때 폼에는 설정한 추가 필드의 순서대로 표시되어야 함

### 3. 추가 필드 순서 변경
- 드래그 앤 드롭으로 필드 순서 변경
- 위/아래 화살표 버튼으로도 순서 조정 가능
- 순서 정보는 validation_rules 내에 'order' 속성으로 저장
- 실시간으로 순서 변경 반영

### 4. UI/UX 개선사항
- 필드 추가/수정 시 실시간 미리보기
- 필드 삭제 시 확인 대화상자
- 필드 타입별 아이콘 표시
- 모바일 반응형 디자인 개선

## 기술적 고려사항

### 데이터베이스 구조
- expense_codes.limit_amount: NULL 허용 (한도 없음 표현)
- validation_rules JSON 구조 확장:
  ```json
  {
    "required_fields": {
      "field_1": {
        "label": "참석자",
        "type": "attendees",
        "required": true,
        "order": 1
      },
      "field_2": {
        "label": "목적",
        "type": "text",
        "required": false,
        "order": 2
      }
    }
  }
  ```

### 마이그레이션 전략
- 기존 데이터 호환성 유지
- 기존 필드에 order 속성 자동 추가
- 버전 관리 시스템과의 충돌 방지

### Stimulus 컨트롤러
- expense-code-form 컨트롤러 확장
- 드래그 앤 드롭 기능 추가
- 실시간 유효성 검사

## 구현 단계

### Phase 1: 한도 없음 옵션
1. UI에 체크박스 추가
2. JavaScript로 입력 필드 제어
3. 컨트롤러에서 NULL 값 처리
4. 뷰에서 "한도 없음" 표시

### Phase 2: 필드 수정 기능
1. 필드 편집 UI 구현
2. 필드 키 자동 생성 로직
3. 데이터 무결성 검증
4. 변경 이력 추적 (선택사항)

### Phase 3: 순서 변경 기능
1. 드래그 앤 드롭 라이브러리 통합
2. 순서 정보 저장 로직
3. 화살표 버튼 대체 방법
4. 모바일 터치 지원

### Phase 4: UX 개선
1. 실시간 미리보기 구현
2. 확인 대화상자 추가
3. 아이콘 및 시각적 개선
4. 반응형 디자인 최적화

## 성공 지표
- 경비 코드 설정 시간 30% 단축
- 사용자 실수로 인한 재작업 50% 감소
- 모바일 사용성 향상

## 일정
- 전체 구현 기간: 2-3일
- Phase 1: 0.5일
- Phase 2: 1일
- Phase 3: 1일
- Phase 4: 0.5일

## 리스크 및 대응
- 기존 데이터 마이그레이션 실패 → 철저한 백업 및 테스트
- 드래그 앤 드롭 브라우저 호환성 → 폴백 옵션 제공
- 성능 저하 → 필드 개수 제한 (최대 20개)