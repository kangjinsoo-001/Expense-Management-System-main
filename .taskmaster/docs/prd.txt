# 경비 시스템 (Expense Management System) PRD

## Overview
기업의 경비 처리 프로세스를 디지털화하고 자동화하는 종합 경비 관리 시스템입니다. 직원들의 경비 신청부터 승인, 정산, 보고서 생성까지 전체 워크플로우를 관리합니다. PDF 영수증 자동 분석, 다단계 승인 프로세스, 실시간 대시보드, 월말 마감 자동화 등의 핵심 기능을 제공합니다.

## Core Features

### 1. 경비 신청 및 관리
- 경비 시트 생성 및 경비 항목 추가/수정/삭제
- 경비 코드별 자동 입력 필드 및 검증 규칙
- PDF 영수증 업로드 및 자동 정보 추출 (OCR)
- 경비 설명 템플릿 자동 생성
- 실시간 입력 검증 및 한도 체크

### 2. 승인 워크플로우
- 조직 구조 기반 다단계 승인 프로세스
- 역할 기반 승인 권한 관리 (팀장, 본부장, CFO 등)
- 승인/반려 시 코멘트 기능
- 승인 진행 상황 실시간 추적
- 승인 요청 알림 및 리마인더

### 3. 대시보드 및 보고서
- 실시간 경비 현황 대시보드
- 경비 코드별, 조직별, 기간별 분석 차트
- 예산 대비 사용률 게이지
- 추세 분석 및 예측
- 맞춤형 보고서 생성 및 Excel/PDF 내보내기

### 4. 월말 마감 프로세스
- 자동 마감 일정 관리
- 미제출 경비 시트 알림
- 마감 대시보드 및 진행률 추적
- 월별 정산 보고서 자동 생성

### 5. 시스템 관리
- 경비 코드 및 코스트 센터 관리
- 조직 구조 및 사용자 권한 관리
- 승인 템플릿 설정
- 감사 로그 및 이력 관리

## User Experience

### 사용자 페르소나
1. **일반 직원**: 경비를 신청하고 진행 상황을 확인
2. **승인자**: 경비를 검토하고 승인/반려 결정
3. **재무팀**: 전체 경비를 모니터링하고 정산 처리
4. **관리자**: 시스템 설정 및 사용자 관리

### 주요 사용자 플로우
1. 경비 신청 플로우: 시트 생성 → 항목 추가 → PDF 업로드 → 제출
2. 승인 플로우: 알림 수신 → 검토 → 승인/반려 → 다음 승인자 전달
3. 정산 플로우: 승인 완료 확인 → 정산 처리 → 보고서 생성

### UI/UX 고려사항
- 모바일 반응형 디자인 (Tailwind CSS)
- 실시간 업데이트 (Turbo, Stimulus)
- 직관적인 네비게이션 및 검색
- 빠른 로딩을 위한 캐싱 전략

## Technical Architecture

### 시스템 컴포넌트
- **프론트엔드**: Rails Views + Turbo + Stimulus.js
- **백엔드**: Rails 8.0.2 (Ruby 3.4.5)
- **데이터베이스**: SQLite (개발), PostgreSQL (운영)
- **캐싱**: Solid Cache
- **작업 큐**: Solid Queue
- **파일 저장소**: Active Storage

### 주요 데이터 모델
- User (사용자)
- Organization (조직)
- ExpenseSheet (경비 시트)
- ExpenseItem (경비 항목)
- ExpenseCode (경비 코드)
- CostCenter (코스트 센터)
- ApprovalFlow/ApprovalStep (승인 플로우)
- ExpenseItemApproval (개별 승인 이력)

### API 및 통합
- PDF 분석 API (OCR)
- 이메일 알림 (Action Mailer)
- 실시간 업데이트 (Action Cable)
- Excel/PDF 내보내기
- 향후: 외부 ERP 시스템 연동 (talenx API)

## Development Roadmap

### Phase 1: 핵심 기능 구현
- 기본 데이터 모델 및 관계 설정
- 경비 시트/항목 CRUD 기능
- 사용자 인증 및 권한 관리
- 기본 UI 레이아웃 및 네비게이션

### Phase 2: 승인 시스템
- 승인 플로우 엔진 구현
- 승인자 대시보드
- 승인 알림 시스템
- 승인 이력 및 코멘트 기능

### Phase 3: 분석 및 보고서
- 실시간 대시보드 구현
- 각종 분석 차트 (Chart.js)
- 보고서 생성 및 내보내기
- 예산 관리 기능

### Phase 4: 자동화 및 최적화
- PDF 자동 분석 기능
- 월말 마감 자동화
- 성능 최적화 (캐싱, 인덱싱)
- 모바일 UX 개선

### Phase 5: 외부 연동
- talenx API 통합
- 외부 회계 시스템 연동
- 고급 보고서 기능
- 머신러닝 기반 이상 탐지

## Logical Dependency Chain

1. **기초 설정**: 사용자/조직 모델 → 인증/권한 시스템
2. **핵심 도메인**: 경비 코드/코스트 센터 → 경비 시트/항목
3. **워크플로우**: 승인 템플릿 → 승인 플로우 → 승인 처리
4. **UI/UX**: 기본 레이아웃 → CRUD 화면 → 대시보드
5. **고급 기능**: 분석/보고서 → PDF 처리 → 자동화

## Risks and Mitigations

### 기술적 도전과제
- **PDF 분석 정확도**: 다양한 영수증 포맷 대응
- **실시간 업데이트 성능**: WebSocket 연결 관리
- **대용량 데이터 처리**: 페이지네이션 및 캐싱 전략

### MVP 범위 설정
- **필수 기능**: 경비 신청, 승인, 기본 대시보드
- **선택 기능**: PDF 자동 분석, 고급 보고서
- **향후 기능**: 외부 시스템 연동, ML 기능

### 리소스 제약
- 단계별 개발로 리스크 분산
- 오픈소스 라이브러리 적극 활용
- 클라우드 서비스 활용 (파일 저장소, OCR)

## Appendix

### 기술 스택 상세
- Rails 8.0.2 + Ruby 3.4.5
- Turbo 8 + Stimulus 3
- Tailwind CSS 3
- Chart.js
- SQLite/PostgreSQL
- Redis (캐싱, 세션)

### 보안 고려사항
- 역할 기반 접근 제어 (RBAC)
- 민감 데이터 암호화
- 감사 로그
- HTTPS 강제

### 성능 목표
- 페이지 로드: < 200ms
- API 응답: < 100ms
- 동시 사용자: 1000+
- 가용성: 99.9%