# 경비 시트 승인 규칙 시스템 PRD

## 프로젝트 개요
경비 시트 제출 시 조직의 승인 규칙을 설정하고, 사용자가 경비 시트 제출 시 이 규칙을 준수하도록 강제하는 시스템을 구현한다. 기존 경비 항목(ExpenseItem)의 승인 규칙 검증 시스템을 확장하여, 경비 시트 전체 수준에서도 승인 규칙을 적용한다.

## 핵심 목표
1. 관리자가 경비 시트 승인 규칙을 설정할 수 있는 UI 제공
2. 제출자의 보직에 따른 조건부 승인 규칙 지원
3. 경비 시트 제출 시 실시간으로 승인 규칙 검증
4. 승인 규칙 미충족 시 제출 차단
5. 기존 경비 항목 검증 로직과 UI를 최대한 재사용

## 기능 요구사항

### 1. 승인 규칙 데이터 모델
- ExpenseSheetApprovalRule 테이블 생성
- 폴리몰픽 관계로 ApprovalRequest와 연결 가능
- 제출자 보직(submitter_group) 조건 지원
- 다양한 조건 타입 지원 (총금액, 항목수, 제출자 기반)
- 규칙 우선순위(order) 및 활성화 상태 관리

### 2. 관리자 승인 규칙 관리 기능
- 관리자 메뉴: 관리자 > 승인 설정 > 경비 시트 승인 규칙
- 규칙 목록 조회 (우선순위, 조건, 승인 그룹, 상태 표시)
- 새 규칙 추가 (조건 빌더 UI 제공)
- 규칙 수정 및 삭제
- 규칙 활성화/비활성화 토글

### 3. 조건 빌더 UI
- 규칙 유형 선택: 총 금액 기준, 제출자 보직 기준, 경비 항목 수 기준
- 제출자 그룹 선택 (예: "보직자가 제출할 때")
- 금액 조건 설정 (예: "총 금액 > 1,000,000원")
- 필요한 승인 그룹 선택
- Stimulus 컨트롤러로 동적 UI 구현

### 4. 경비 시트 제출 시 검증
- ExpenseSheet 모델에 승인 규칙 검증 로직 추가
- ExpenseSheetApprovalValidator 서비스 구현
- 경비 시트 전체 규칙과 개별 항목 규칙 모두 검증
- 검증 실패 시 명확한 에러 메시지 제공

### 5. 실시간 클라이언트 검증
- 기존 expense_item_approval_controller.js 로직 재사용
- ApprovalValidationHelper 클래스 활용
- 결재선 선택 시 즉시 검증 수행
- 검증 결과를 기존 UI 스타일로 표시

### 6. 검증 메시지 형식 통일
- 에러: "승인 필요: [그룹명]" (빨간색 배경)
- 경고: "필수 아님: [그룹명]" (노란색 배경)
- 정보: "귀하는 이미 [그룹명] 권한을 보유하고 있습니다" (파란색 배경)
- font-semibold로 "승인 필요:", "필수 아님:" 부분 강조

## 기술 요구사항

### 환경
- Rails 8.0.2 / Ruby 3.4.5
- Turbo/Stimulus 프레임워크
- Tailwind CSS

### 아키텍처 원칙
- 폴리몰픽 관계 활용 (ApprovalLine, ApprovalRequest)
- 기존 검증 로직 최대한 재사용
- 서비스 객체 패턴으로 복잡한 비즈니스 로직 분리
- Stimulus 컨트롤러로 클라이언트 상호작용 관리

### 기존 시스템 통합
- ExpenseCodeApprovalRule의 조건 평가 로직 재사용
- ApprovalValidationHelper JavaScript 클래스 활용
- expense_item_approval_controller.js의 UI 업데이트 로직 재사용
- 기존 승인/참조 구분 로직 준수 (role='approve'만 승인 권한)

## 구현 작업 목록

### Phase 1: 데이터베이스 및 모델
1. expense_sheet_approval_rules 테이블 마이그레이션 생성
2. ExpenseSheetApprovalRule 모델 구현
3. ExpenseSheet 모델에 폴리몰픽 관계 및 검증 추가

### Phase 2: 관리자 UI
4. Admin::ExpenseSheetApprovalRulesController 구현
5. 관리자 뷰 파일 생성 (index, new, edit, _form)
6. 관리자 메뉴에 링크 추가
7. 라우트 설정

### Phase 3: 조건 빌더
8. rule_condition_builder_controller.js Stimulus 컨트롤러 구현
9. 동적 조건 입력 UI 구현

### Phase 4: 검증 로직
10. ExpenseSheetApprovalValidator 서비스 구현
11. API 엔드포인트 추가 (실시간 검증용)

### Phase 5: 클라이언트 통합
12. expense_sheet_form_controller.js 구현
13. 경비 시트 폼에 검증 메시지 UI 추가
14. 제출 버튼 활성화/비활성화 로직

### Phase 6: 테스트
15. 모델 테스트 작성
16. 서비스 테스트 작성
17. 시스템 테스트 작성

## 예상 결과

### 관리자 화면
- 승인 규칙 목록에서 조건과 승인 그룹을 한눈에 확인
- 직관적인 조건 빌더로 복잡한 규칙도 쉽게 설정
- 규칙 우선순위 조정으로 유연한 승인 체계 구성

### 사용자 화면
- 경비 시트 작성 시 필요한 승인 그룹 실시간 표시
- 결재선 선택 시 즉각적인 검증 피드백
- 승인 규칙 미충족 시 명확한 안내 메시지와 제출 차단

### 시스템 효과
- 조직의 승인 정책 자동화
- 규정 위반 사전 방지
- 불필요한 승인 단계 최소화
- 사용자 실수 감소

## 제약 사항 및 주의 사항
1. 승인자(role='approve')와 참조자(role='reference') 명확히 구분
2. 폴리몰픽 관계 구현 시 기존 패턴 준수
3. 기존 UI 컴포넌트와 스타일 일관성 유지
4. 성능을 위해 검증 로직 최적화 필요
5. 대량의 경비 항목 처리 시 성능 고려